/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base';
// @ts-ignore
import type { GetDiariesResponse } from '../models';
// @ts-ignore
import type { GetDiaryResponse } from '../models';
// @ts-ignore
import type { PostDiaryRequest } from '../models';
// @ts-ignore
import type { ProblemDetail } from '../models';
// @ts-ignore
import type { PutDiaryRequest } from '../models';
/**
 * DiaryApi - axios parameter creator
 * @export
 */
export const DiaryApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * ID を指定して、日記情報を削除します。
     * @summary ID を指定して、日記情報を削除します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiary: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteDiary', 'id', id);
      const localVarPath = `/api/diary/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 年月を指定して、日記を取得します。
     * @summary 年月を指定して、日記を取得します。
     * @param {number} [year]
     * @param {number} [month]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiaries: async (
      year?: number,
      month?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/diary`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (year !== undefined) {
        localVarQueryParameter['year'] = year;
      }

      if (month !== undefined) {
        localVarQueryParameter['month'] = month;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * UserID を指定して、日記を全件取得します。
     * @summary UserID を指定して、日記を全件取得します。
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiariesByUserId: async (
      userId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getDiariesByUserId', 'userId', userId);
      const localVarPath = `/api/diary/user/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ID を指定して、日記情報を取得します。
     * @summary ID を指定して、日記情報を取得します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiary: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDiary', 'id', id);
      const localVarPath = `/api/diary/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 日記情報を登録します。
     * @summary 日記情報を登録します。
     * @param {PostDiaryRequest} postDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDiary: async (
      postDiaryRequest: PostDiaryRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'postDiaryRequest' is not null or undefined
      assertParamExists('postDiary', 'postDiaryRequest', postDiaryRequest);
      const localVarPath = `/api/diary`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postDiaryRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 日記情報を更新します。
     * @summary 日記情報を更新します。
     * @param {PutDiaryRequest} putDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDiary: async (
      putDiaryRequest: PutDiaryRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'putDiaryRequest' is not null or undefined
      assertParamExists('putDiary', 'putDiaryRequest', putDiaryRequest);
      const localVarPath = `/api/diary`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putDiaryRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DiaryApi - functional programming interface
 * @export
 */
export const DiaryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DiaryApiAxiosParamCreator(configuration);
  return {
    /**
     * ID を指定して、日記情報を削除します。
     * @summary ID を指定して、日記情報を削除します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDiary(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDiary(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.deleteDiary']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 年月を指定して、日記を取得します。
     * @summary 年月を指定して、日記を取得します。
     * @param {number} [year]
     * @param {number} [month]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDiaries(
      year?: number,
      month?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetDiariesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDiaries(
        year,
        month,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.getDiaries']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * UserID を指定して、日記を全件取得します。
     * @summary UserID を指定して、日記を全件取得します。
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDiariesByUserId(
      userId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetDiariesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDiariesByUserId(userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.getDiariesByUserId']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ID を指定して、日記情報を取得します。
     * @summary ID を指定して、日記情報を取得します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDiary(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetDiaryResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDiary(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.getDiary']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 日記情報を登録します。
     * @summary 日記情報を登録します。
     * @param {PostDiaryRequest} postDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDiary(
      postDiaryRequest: PostDiaryRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postDiary(
        postDiaryRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.postDiary']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 日記情報を更新します。
     * @summary 日記情報を更新します。
     * @param {PutDiaryRequest} putDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDiary(
      putDiaryRequest: PutDiaryRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putDiary(
        putDiaryRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DiaryApi.putDiary']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DiaryApi - factory interface
 * @export
 */
export const DiaryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DiaryApiFp(configuration);
  return {
    /**
     * ID を指定して、日記情報を削除します。
     * @summary ID を指定して、日記情報を削除します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiary(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteDiary(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 年月を指定して、日記を取得します。
     * @summary 年月を指定して、日記を取得します。
     * @param {number} [year]
     * @param {number} [month]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiaries(
      year?: number,
      month?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetDiariesResponse> {
      return localVarFp
        .getDiaries(year, month, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * UserID を指定して、日記を全件取得します。
     * @summary UserID を指定して、日記を全件取得します。
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiariesByUserId(
      userId: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetDiariesResponse> {
      return localVarFp
        .getDiariesByUserId(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ID を指定して、日記情報を取得します。
     * @summary ID を指定して、日記情報を取得します。
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiary(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetDiaryResponse> {
      return localVarFp
        .getDiary(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 日記情報を登録します。
     * @summary 日記情報を登録します。
     * @param {PostDiaryRequest} postDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDiary(
      postDiaryRequest: PostDiaryRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .postDiary(postDiaryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 日記情報を更新します。
     * @summary 日記情報を更新します。
     * @param {PutDiaryRequest} putDiaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDiary(
      putDiaryRequest: PutDiaryRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .putDiary(putDiaryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DiaryApi - object-oriented interface
 * @export
 * @class DiaryApi
 * @extends {BaseAPI}
 */
export class DiaryApi extends BaseAPI {
  /**
   * ID を指定して、日記情報を削除します。
   * @summary ID を指定して、日記情報を削除します。
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public deleteDiary(id: number, options?: RawAxiosRequestConfig) {
    return DiaryApiFp(this.configuration)
      .deleteDiary(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 年月を指定して、日記を取得します。
   * @summary 年月を指定して、日記を取得します。
   * @param {number} [year]
   * @param {number} [month]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public getDiaries(
    year?: number,
    month?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DiaryApiFp(this.configuration)
      .getDiaries(year, month, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * UserID を指定して、日記を全件取得します。
   * @summary UserID を指定して、日記を全件取得します。
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public getDiariesByUserId(userId: number, options?: RawAxiosRequestConfig) {
    return DiaryApiFp(this.configuration)
      .getDiariesByUserId(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ID を指定して、日記情報を取得します。
   * @summary ID を指定して、日記情報を取得します。
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public getDiary(id: number, options?: RawAxiosRequestConfig) {
    return DiaryApiFp(this.configuration)
      .getDiary(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 日記情報を登録します。
   * @summary 日記情報を登録します。
   * @param {PostDiaryRequest} postDiaryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public postDiary(
    postDiaryRequest: PostDiaryRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DiaryApiFp(this.configuration)
      .postDiary(postDiaryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 日記情報を更新します。
   * @summary 日記情報を更新します。
   * @param {PutDiaryRequest} putDiaryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiaryApi
   */
  public putDiary(
    putDiaryRequest: PutDiaryRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DiaryApiFp(this.configuration)
      .putDiary(putDiaryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
