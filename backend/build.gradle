/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.8/samples
 */
buildscript {
  apply from: 'dependencies.gradle'
}

plugins {
  id 'com.github.spotbugs' version "$spotbugsVersion" apply false
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'

  compileJava.options.encoding = 'UTF-8'
  compileTestJava.options.encoding = 'UTF-8'
  javadoc.options.encoding = 'UTF-8'
  
  dependencies {  
    // Lombokの設定
    // annotationProcessorの設定を加えないとcompileJavaでエラーが発生する
    annotationProcessor supportDependencies.lombok
    testAnnotationProcessor supportDependencies.lombok
    compileOnly supportDependencies.lombok
    testCompileOnly supportDependencies.lombok

    // SpotBugsの警告対策
    // https://github.com/spotbugs/spotbugs-gradle-plugin/issues/136
    spotbugsSlf4j  supportDependencies.slf4j
  }

  jacoco {
    toolVersion = "$jacocoToolVersion"
  }
  checkstyle {
    toolVersion = "$checkstyleToolVersion"
    configDirectory = rootProject.file('config/checkstyle')
  } 
  spotbugs {
    excludeFilter.set(rootProject.file('config/spotbugs/exclude-filter.xml'))
    toolVersion = "$spotbugsToolVersion"
    ignoreFailures = true
  }

  // testタスクの後にjacocoTestReportタスクを実施する
  test {
    // UTテスト時はtestプロファイルを利用
    jvmArgs=['-Dspring.profiles.active=test']

    useJUnitPlatform()
    finalizedBy jacocoTestReport
  }

  // JaCoCoのレポート出力の際に上述のクラスを除外する
  jacocoTestReport {
    reports {
      html.required = true
    }
  }
  
  // SpotBugs実施後、HTMLレポート出力も同時に行う
  spotbugsMain {
    reports {
      xml.enabled = false
      html {
        enabled true
        destination file("${buildDir}/reports/spotbugs/main.html")
      }
    }
  }
}